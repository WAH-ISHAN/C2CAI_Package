{"version":3,"sources":["../src/indexer.ts"],"sourcesContent":["import OpenAI from \"openai\";\r\nimport type { PageRow } from \"./db.js\";\r\nimport { upsertPage } from \"./db.js\";\r\nexport { createC2CAIServer } from \"./server.js\";\r\nexport { C2CAIWidget } from \"./client/widget.js\";\r\n\r\nexport async function indexPages(\r\n  client: OpenAI,\r\n  pages: { url: string; title: string; text: string }[],\r\n  embedModel: string\r\n) {\r\n  for (const p of pages) {\r\n    const input = `${p.title}\\n\\n${p.text}`.slice(0, 8000);\r\n    const emb = await client.embeddings.create({ model: embedModel, input });\r\n    const vec = emb.data[0].embedding as number[];\r\n    const row: PageRow = {\r\n      url: p.url,\r\n      title: p.title,\r\n      content: p.text,\r\n      embedding: vec,\r\n    };\r\n    await upsertPage(row); // âœ… only one arg now\r\n    await new Promise((r) => setTimeout(r, 50));\r\n  }\r\n}"],"mappings":";;;;;;;;;;;;;AAMA,eAAsB,WACpB,QACA,OACA,YACA;AACA,aAAW,KAAK,OAAO;AACrB,UAAM,QAAQ,GAAG,EAAE,KAAK;AAAA;AAAA,EAAO,EAAE,IAAI,GAAG,MAAM,GAAG,GAAI;AACrD,UAAM,MAAM,MAAM,OAAO,WAAW,OAAO,EAAE,OAAO,YAAY,MAAM,CAAC;AACvE,UAAM,MAAM,IAAI,KAAK,CAAC,EAAE;AACxB,UAAM,MAAe;AAAA,MACnB,KAAK,EAAE;AAAA,MACP,OAAO,EAAE;AAAA,MACT,SAAS,EAAE;AAAA,MACX,WAAW;AAAA,IACb;AACA,UAAM,WAAW,GAAG;AACpB,UAAM,IAAI,QAAQ,CAAC,MAAM,WAAW,GAAG,EAAE,CAAC;AAAA,EAC5C;AACF;","names":[]}