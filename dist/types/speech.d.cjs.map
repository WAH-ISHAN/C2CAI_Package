{"version":3,"sources":["../../src/types/speech.d.ts"],"sourcesContent":["// src/types/web-speech-recognition.ts\r\nexport interface SpeechRecognitionAlternative {\r\n  transcript: string;\r\n  confidence: number;\r\n}\r\n\r\nexport interface SpeechRecognitionResult {\r\n  isFinal: boolean;\r\n  length: number;\r\n  item(index: number): SpeechRecognitionAlternative;\r\n  [index: number]: SpeechRecognitionAlternative;\r\n}\r\n\r\nexport interface SpeechRecognitionResultList {\r\n  length: number;\r\n  item(index: number): SpeechRecognitionResult;\r\n  [index: number]: SpeechRecognitionResult;\r\n}\r\n\r\nexport interface SpeechRecognitionEvent extends Event {\r\n  readonly resultIndex: number;\r\n  readonly results: SpeechRecognitionResultList;\r\n}\r\n\r\nexport interface SpeechRecognitionErrorEvent extends Event {\r\n  readonly error: string;\r\n  readonly message: string;\r\n}\r\n\r\nexport interface SpeechRecognition extends EventTarget {\r\n  lang: string;\r\n  continuous: boolean;\r\n  interimResults: boolean;\r\n  maxAlternatives?: number;\r\n\r\n  onresult: ((this: SpeechRecognition, ev: SpeechRecognitionEvent) => any) | null;\r\n  onerror: ((this: SpeechRecognition, ev: SpeechRecognitionErrorEvent) => any) | null;\r\n  onend?: ((this: SpeechRecognition, ev: Event) => any) | null;\r\n  onstart?: ((this: SpeechRecognition, ev: Event) => any) | null;\r\n\r\n  start(): void;\r\n  stop(): void;\r\n  abort?(): void;\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}