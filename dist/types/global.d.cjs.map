{"version":3,"sources":["../../src/types/global.d.ts"],"sourcesContent":["// src/types/global.d.ts - Ambient declarations for browser APIs (avoids module augmentation errors)\r\n\r\ndeclare global {\r\n  interface Window {\r\n    SpeechRecognition?: new () => SpeechRecognition;\r\n    webkitSpeechRecognition?: new () => SpeechRecognition;\r\n    initC2CAI?: (opts?: { url?: string; serverUrl?: string; containerId?: string }) => void;\r\n  }\r\n}\r\n\r\nexport interface SpeechRecognitionEvent extends Event {\r\n  readonly results: SpeechRecognitionResultList;\r\n}\r\n\r\nexport interface SpeechRecognitionResultList {\r\n  readonly length: number;\r\n  item(index: number): SpeechRecognitionResult;\r\n  [index: number]: SpeechRecognitionResult;\r\n}\r\n\r\nexport interface SpeechRecognitionResult {\r\n  readonly length: number;\r\n  readonly isFinal: boolean;\r\n  item(index: number): SpeechRecognitionAlternative;\r\n  [index: number]: SpeechRecognitionAlternative;\r\n}\r\n\r\nexport interface SpeechRecognitionAlternative {\r\n  readonly transcript: string;\r\n  readonly confidence: number;\r\n}\r\n\r\nexport interface SpeechRecognitionErrorEvent extends Event {\r\n  readonly error: string;\r\n  message?: string;\r\n}\r\n\r\nexport interface SpeechRecognition extends EventTarget {\r\n  continuous: boolean;\r\n  interimResults: boolean;\r\n  lang: string;\r\n  onresult: ((this: SpeechRecognition, ev: SpeechRecognitionEvent) => any) | null;\r\n  onerror: ((this: SpeechRecognition, ev: SpeechRecognitionErrorEvent) => any) | null;\r\n  start(): void;\r\n  stop(): void;\r\n}\r\n\r\n// Export for SpeechSynthesisUtterance (DOM lib covers, but explicit)\r\nexport declare class SpeechSynthesisUtterance {\r\n  constructor(text: string);\r\n  lang: string;\r\n  volume: number;\r\n  rate: number;\r\n}"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}