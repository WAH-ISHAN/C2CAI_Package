{"version":3,"sources":["../src/db.ts","../src/config.ts"],"sourcesContent":["// src/db.ts (Simple in-memory DB for vector store persistence â€“ upgrade to SQLite/Pinecone for prod)\r\nimport { MemoryVectorStore } from \"langchain/vectorstores/memory\";\r\nimport { OpenAIEmbeddings } from \"@langchain/openai\";\r\nimport { Document } from \"@langchain/core/documents\";\r\nimport { OPENAI_API_KEY } from './config.js';\r\n\r\nconst embeddings = new OpenAIEmbeddings({ openAIApiKey: OPENAI_API_KEY });\r\n\r\nlet vectorStore: MemoryVectorStore | null = null;\r\n\r\nexport async function initDB(docs: Document[]) {\r\n  vectorStore = await MemoryVectorStore.fromDocuments(docs, embeddings);\r\n}\r\n\r\nexport async function retrieveFromDB(query: string, k: number = 4) {\r\n  if (!vectorStore) throw new Error('DB not initialized');\r\n  return await vectorStore.similaritySearch(query, k);\r\n}\r\n\r\nexport function getDB() {\r\n  return vectorStore;\r\n}","// src/config.ts\r\nimport dotenv from 'dotenv';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\ndotenv.config({ path: '.env.c2cai' });\r\n\r\nconst configPath = path.join(process.cwd(), 'c2cai.config.json');\r\nconst defaultConfig = {\r\n  openai: { model: 'gpt-4o-mini', temperature: 0 },\r\n  crawler: { chunkSize: 2000, chunkOverlap: 300, maxPages: 10 },\r\n  voice: { defaultLang: 'si-LK', languages: ['si-LK', 'en-US', 'ta-IN'] },\r\n  sales: { enableLeadCapture: true, recommendPrompt: 'Recommend products/services if relevant.' },\r\n  promptTemplate: 'Context: {context}\\nQuestion: {question}\\nSales Tip: {salesTip}\\nAnswer in detail:'\r\n};\r\n\r\nexport let config = defaultConfig;\r\n\r\nif (fs.existsSync(configPath)) {\r\n  const userConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));\r\n  config = { ...defaultConfig, ...userConfig };\r\n}\r\n\r\nexport const OPENAI_API_KEY = process.env.OPENAI_API_KEY;\r\nexport const PORT = parseInt(process.env.PORT || '3000');\r\nexport const SITE_URL = process.env.SITE_URL || 'https://example.com';"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAkC;AAClC,oBAAiC;;;ACDjC,oBAAmB;AACnB,gBAAe;AACf,kBAAiB;AAEjB,cAAAA,QAAO,OAAO,EAAE,MAAM,aAAa,CAAC;AAEpC,IAAM,aAAa,YAAAC,QAAK,KAAK,QAAQ,IAAI,GAAG,mBAAmB;AAC/D,IAAM,gBAAgB;AAAA,EACpB,QAAQ,EAAE,OAAO,eAAe,aAAa,EAAE;AAAA,EAC/C,SAAS,EAAE,WAAW,KAAM,cAAc,KAAK,UAAU,GAAG;AAAA,EAC5D,OAAO,EAAE,aAAa,SAAS,WAAW,CAAC,SAAS,SAAS,OAAO,EAAE;AAAA,EACtE,OAAO,EAAE,mBAAmB,MAAM,iBAAiB,2CAA2C;AAAA,EAC9F,gBAAgB;AAClB;AAEO,IAAI,SAAS;AAEpB,IAAI,UAAAC,QAAG,WAAW,UAAU,GAAG;AAC7B,QAAM,aAAa,KAAK,MAAM,UAAAA,QAAG,aAAa,YAAY,MAAM,CAAC;AACjE,WAAS,EAAE,GAAG,eAAe,GAAG,WAAW;AAC7C;AAEO,IAAM,iBAAiB,QAAQ,IAAI;AACnC,IAAM,OAAO,SAAS,QAAQ,IAAI,QAAQ,MAAM;AAChD,IAAM,WAAW,QAAQ,IAAI,YAAY;;;ADnBhD,IAAM,aAAa,IAAI,+BAAiB,EAAE,cAAc,eAAe,CAAC;AAExE,IAAI,cAAwC;AAE5C,eAAsB,OAAO,MAAkB;AAC7C,gBAAc,MAAM,gCAAkB,cAAc,MAAM,UAAU;AACtE;AAEA,eAAsB,eAAe,OAAe,IAAY,GAAG;AACjE,MAAI,CAAC,YAAa,OAAM,IAAI,MAAM,oBAAoB;AACtD,SAAO,MAAM,YAAY,iBAAiB,OAAO,CAAC;AACpD;AAEO,SAAS,QAAQ;AACtB,SAAO;AACT;","names":["dotenv","path","fs"]}