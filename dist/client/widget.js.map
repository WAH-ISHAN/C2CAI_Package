{"version":3,"sources":["../../src/client/widget.ts"],"sourcesContent":["// src/client/widget.ts\r\nimport type {\r\n  SpeechRecognition as WebSpeechRecognition,\r\n  SpeechRecognitionEvent as WebSpeechRecognitionEvent,\r\n  SpeechRecognitionErrorEvent as WebSpeechRecognitionErrorEvent,\r\n} from '../types/speech';\r\n\r\nclass VoiceWidget {\r\n  private recognition: WebSpeechRecognition | null = null;\r\n  private synthesis = window.speechSynthesis;\r\n  private serverUrl: string;\r\n\r\n  constructor(private containerId: string = 'c2cai-widget', opts?: { serverUrl?: string }) {\r\n    this.serverUrl = opts?.serverUrl ?? 'http://localhost:3000';\r\n    this.initWidget();\r\n  }\r\n\r\n  private initWidget() {\r\n    const container = document.getElementById(this.containerId);\r\n    if (!container) return;\r\n\r\n    const startBtn = document.createElement('button');\r\n    startBtn.textContent = 'Start Voice Assistant';\r\n    startBtn.onclick = () => this.startListening();\r\n    container.appendChild(startBtn);\r\n\r\n    const defaultLang = 'si-LK';\r\n    const userLang = navigator.language || defaultLang;\r\n    this.setupRecognition(userLang);\r\n  }\r\n\r\n  private setupRecognition(lang: string) {\r\n    type SRConstructor = new () => WebSpeechRecognition;\r\n    const SRClass = ((window as any).webkitSpeechRecognition ||\r\n      (window as any).SpeechRecognition) as SRConstructor | undefined;\r\n\r\n    if (!SRClass) return;\r\n\r\n    const recognition = new SRClass();\r\n    recognition.continuous = true;\r\n    recognition.interimResults = false;\r\n    recognition.lang = lang;\r\n\r\n    recognition.onresult = (event: WebSpeechRecognitionEvent) => {\r\n      const lastResultIndex = event.results.length - 1;\r\n      const lastResult = event.results[lastResultIndex];\r\n      if (lastResult?.isFinal) {\r\n        const query = lastResult[0]?.transcript ?? '';\r\n        if (query.trim()) this.handleQuery(query);\r\n      }\r\n    };\r\n\r\n    recognition.onerror = (event: WebSpeechRecognitionErrorEvent) => {\r\n      console.error('Voice error:', event.error);\r\n    };\r\n\r\n    this.recognition = recognition;\r\n  }\r\n\r\n  private async handleQuery(query: string) {\r\n    if (!query.trim()) return;\r\n    try {\r\n      const res = await fetch(`${this.serverUrl}/chat`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ query, lang: this.recognition?.lang || 'en-US' }),\r\n      });\r\n      if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\r\n\r\n      const data = await res.json();\r\n      const response = data.response || 'No response received.';\r\n      this.speak(response, this.recognition?.lang || 'en-US');\r\n    } catch (e) {\r\n      console.error('Handle query error:', e);\r\n      this.speak('Error occurred. Please try again.', this.recognition?.lang || 'en-US');\r\n    }\r\n  }\r\n\r\n  private speak(text: string, lang: string) {\r\n    if (!text) return;\r\n    this.synthesis.cancel();\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    utterance.lang = lang;\r\n    utterance.volume = 1;\r\n    utterance.rate = 0.9;\r\n    this.synthesis.speak(utterance);\r\n  }\r\n\r\n  startListening() {\r\n    if (this.recognition) {\r\n      const welcomeLang = this.recognition.lang || 'en-US';\r\n      this.speak('ආයුබෝවන්! මට කතා කරන්න.', welcomeLang);\r\n      this.recognition.start();\r\n    } else {\r\n      alert('Voice recognition not supported in this browser. Please use Chrome or Edge.');\r\n    }\r\n  }\r\n\r\n  stopListening() {\r\n    if (this.recognition) this.recognition.stop();\r\n    window.speechSynthesis.cancel();\r\n  }\r\n}\r\n\r\n(window as any).initC2CAI = (opts?: { url?: string; serverUrl?: string; containerId?: string }) => {\r\n  new VoiceWidget(opts?.containerId ?? 'c2cai-widget', { serverUrl: opts?.serverUrl });\r\n};\r\n"],"mappings":";AAOA,IAAM,cAAN,MAAkB;AAAA,EAKhB,YAAoB,cAAsB,gBAAgB,MAA+B;AAArE;AAJpB,SAAQ,cAA2C;AACnD,SAAQ,YAAY,OAAO;AAIzB,SAAK,YAAY,MAAM,aAAa;AACpC,SAAK,WAAW;AAAA,EAClB;AAAA,EAEQ,aAAa;AACnB,UAAM,YAAY,SAAS,eAAe,KAAK,WAAW;AAC1D,QAAI,CAAC,UAAW;AAEhB,UAAM,WAAW,SAAS,cAAc,QAAQ;AAChD,aAAS,cAAc;AACvB,aAAS,UAAU,MAAM,KAAK,eAAe;AAC7C,cAAU,YAAY,QAAQ;AAE9B,UAAM,cAAc;AACpB,UAAM,WAAW,UAAU,YAAY;AACvC,SAAK,iBAAiB,QAAQ;AAAA,EAChC;AAAA,EAEQ,iBAAiB,MAAc;AAErC,UAAM,UAAY,OAAe,2BAC9B,OAAe;AAElB,QAAI,CAAC,QAAS;AAEd,UAAM,cAAc,IAAI,QAAQ;AAChC,gBAAY,aAAa;AACzB,gBAAY,iBAAiB;AAC7B,gBAAY,OAAO;AAEnB,gBAAY,WAAW,CAAC,UAAqC;AAC3D,YAAM,kBAAkB,MAAM,QAAQ,SAAS;AAC/C,YAAM,aAAa,MAAM,QAAQ,eAAe;AAChD,UAAI,YAAY,SAAS;AACvB,cAAM,QAAQ,WAAW,CAAC,GAAG,cAAc;AAC3C,YAAI,MAAM,KAAK,EAAG,MAAK,YAAY,KAAK;AAAA,MAC1C;AAAA,IACF;AAEA,gBAAY,UAAU,CAAC,UAA0C;AAC/D,cAAQ,MAAM,gBAAgB,MAAM,KAAK;AAAA,IAC3C;AAEA,SAAK,cAAc;AAAA,EACrB;AAAA,EAEA,MAAc,YAAY,OAAe;AACvC,QAAI,CAAC,MAAM,KAAK,EAAG;AACnB,QAAI;AACF,YAAM,MAAM,MAAM,MAAM,GAAG,KAAK,SAAS,SAAS;AAAA,QAChD,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,QAC9C,MAAM,KAAK,UAAU,EAAE,OAAO,MAAM,KAAK,aAAa,QAAQ,QAAQ,CAAC;AAAA,MACzE,CAAC;AACD,UAAI,CAAC,IAAI,GAAI,OAAM,IAAI,MAAM,uBAAuB,IAAI,MAAM,EAAE;AAEhE,YAAM,OAAO,MAAM,IAAI,KAAK;AAC5B,YAAM,WAAW,KAAK,YAAY;AAClC,WAAK,MAAM,UAAU,KAAK,aAAa,QAAQ,OAAO;AAAA,IACxD,SAAS,GAAG;AACV,cAAQ,MAAM,uBAAuB,CAAC;AACtC,WAAK,MAAM,qCAAqC,KAAK,aAAa,QAAQ,OAAO;AAAA,IACnF;AAAA,EACF;AAAA,EAEQ,MAAM,MAAc,MAAc;AACxC,QAAI,CAAC,KAAM;AACX,SAAK,UAAU,OAAO;AACtB,UAAM,YAAY,IAAI,yBAAyB,IAAI;AACnD,cAAU,OAAO;AACjB,cAAU,SAAS;AACnB,cAAU,OAAO;AACjB,SAAK,UAAU,MAAM,SAAS;AAAA,EAChC;AAAA,EAEA,iBAAiB;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,cAAc,KAAK,YAAY,QAAQ;AAC7C,WAAK,MAAM,qHAA2B,WAAW;AACjD,WAAK,YAAY,MAAM;AAAA,IACzB,OAAO;AACL,YAAM,6EAA6E;AAAA,IACrF;AAAA,EACF;AAAA,EAEA,gBAAgB;AACd,QAAI,KAAK,YAAa,MAAK,YAAY,KAAK;AAC5C,WAAO,gBAAgB,OAAO;AAAA,EAChC;AACF;AAEC,OAAe,YAAY,CAAC,SAAsE;AACjG,MAAI,YAAY,MAAM,eAAe,gBAAgB,EAAE,WAAW,MAAM,UAAU,CAAC;AACrF;","names":[]}