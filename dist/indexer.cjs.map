{"version":3,"sources":["../src/indexer.ts","../src/db.ts","../src/server.ts","../src/config.ts","../src/rag.ts","../src/client/widget.ts"],"sourcesContent":["import OpenAI from \"openai\";\r\nimport type { PageRow } from \"./db.js\";\r\nimport { upsertPage } from \"./db.js\";\r\nexport { createC2CAIServer } from \"./server.js\";\r\nexport { C2CAIWidget } from \"./client/widget.js\";\r\n\r\nexport async function indexPages(\r\n  client: OpenAI,\r\n  pages: { url: string; title: string; text: string }[],\r\n  embedModel: string\r\n) {\r\n  for (const p of pages) {\r\n    const input = `${p.title}\\n\\n${p.text}`.slice(0, 8000);\r\n    const emb = await client.embeddings.create({ model: embedModel, input });\r\n    const vec = emb.data[0].embedding as number[];\r\n    const row: PageRow = {\r\n      url: p.url,\r\n      title: p.title,\r\n      content: p.text,\r\n      embedding: vec,\r\n    };\r\n    await upsertPage(row); // âœ… only one arg now\r\n    await new Promise((r) => setTimeout(r, 50));\r\n  }\r\n}","import Datastore from \"nedb-promises\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nconst dataDir = path.resolve(\".c2cai\");\r\nfs.mkdirSync(dataDir, { recursive: true });\r\n\r\nconst pagesDB = Datastore.create({ filename: path.join(dataDir, \"pages.db\"), autoload: true });\r\nconst chatsDB = Datastore.create({ filename: path.join(dataDir, \"chats.db\"), autoload: true });\r\n\r\nexport type PageRow = {\r\n  url: string;\r\n  title: string;\r\n  content: string;\r\n  embedding: number[];\r\n};\r\n\r\nexport async function upsertPage(p: PageRow) {\r\n  await pagesDB.update({ url: p.url }, p, { upsert: true });\r\n}\r\n\r\nexport async function getAllPages(): Promise<PageRow[]> {\r\n  return await pagesDB.find({});\r\n}\r\n\r\nexport async function logChat(rec: {\r\n  id: string;\r\n  ts: number;\r\n  lang: string;\r\n  user: string;\r\n  assistant: string;\r\n  sources: string[];\r\n}) {\r\n  await chatsDB.insert(rec);\r\n}\r\n\r\n// Dummy cosine similarity â€“ same as before\r\nexport function cosineSim(a: number[], b: number[]) {\r\n  let dot = 0,\r\n    na = 0,\r\n    nb = 0;\r\n  for (let i = 0; i < a.length; i++) {\r\n    const x = a[i],\r\n      y = b[i];\r\n    dot += x * y;\r\n    na += x * x;\r\n    nb += y * y;\r\n  }\r\n  return dot / (Math.sqrt(na) * Math.sqrt(nb) + 1e-8);\r\n}","import express from \"express\";\r\nimport OpenAI from \"openai\";\r\nimport { loadConfig, env } from \"./config.js\";\r\nimport { logChat } from \"./db.js\";\r\nimport { answerWithRAG } from \"./rag.js\";\r\nimport crypto from \"crypto\";\r\n\r\nexport function createC2CAIServer() {\r\n  const cfg = loadConfig();\r\n  const client = new OpenAI({ apiKey: env.OPENAI_API_KEY });\r\n  const router = express.Router();\r\n  router.use(express.json({ limit: \"1mb\" }));\r\n\r\n  router.post(\"/chat\", async (req, res) => {\r\n    try {\r\n      const { message, page, sessionId } = req.body;\r\n      const out = await answerWithRAG({\r\n        client,\r\n        model: env.MODEL,\r\n        embedModel: env.EMBED_MODEL,\r\n        question: message,\r\n        pageHint: page,\r\n        allowLangs: cfg.allowLanguages\r\n      });\r\n      await logChat({\r\n        id: sessionId || crypto.randomUUID(),\r\n        ts: Date.now(),\r\n        lang: \"auto\",\r\n        user: message,\r\n        assistant: out.answer,\r\n        sources: out.sources\r\n      });\r\n      res.json(out);\r\n    } catch (e: any) {\r\n      res.status(500).json({ error: e.message || \"server_error\" });\r\n    }\r\n  });\r\n\r\n  return router;\r\n}","import fs from \"fs\";\r\nimport path from \"path\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config({ path: \".env.c2cai\" });\r\n\r\nexport type C2CConfig = {\r\n  site: { baseUrl: string; maxPages: number; sameDomainOnly: boolean };\r\n  dbPath: string;\r\n  topK: number;\r\n  allowLanguages: string[];\r\n};\r\n\r\nexport function loadConfig(): C2CConfig {\r\n  const p = path.resolve(process.cwd(), \"c2cai.config.json\");\r\n  const cfg = JSON.parse(fs.readFileSync(p, \"utf8\"));\r\n  return cfg;\r\n}\r\n\r\nexport const env = {\r\n  OPENAI_API_KEY: process.env.OPENAI_API_KEY!,\r\n  MODEL: process.env.C2CAI_MODEL || \"gpt-4o-mini\",\r\n  EMBED_MODEL: process.env.C2CAI_EMBED_MODEL || \"text-embedding-3-small\",\r\n};","import OpenAI from \"openai\";\r\nimport { cosineSim, getAllPages } from \"./db.js\";\r\n\r\nexport async function pickContext(queryVec: number[], topK = 5) {\r\n  const pages = await getAllPages();\r\n  const scored = pages\r\n    .map((p) => ({ p, s: cosineSim(queryVec, p.embedding) }))\r\n    .sort((a, b) => b.s - a.s)\r\n    .slice(0, topK);\r\n  return scored.map((x) => x.p);\r\n}\r\n\r\nexport async function answerWithRAG(opts: {\r\n  client: OpenAI;\r\n  model: string;\r\n  embedModel: string;\r\n  question: string;\r\n  pageHint?: { url?: string; title?: string; text?: string };\r\n  allowLangs?: string[];\r\n}) {\r\n  const { client, model, embedModel, question, pageHint } = opts;\r\n\r\n  // create embedding for question\r\n  const qEmb = await client.embeddings.create({ model: embedModel, input: question });\r\n\r\n  // use topâ€‘5 context\r\n  const contextPages = await pickContext(qEmb.data[0].embedding as number[], 5);\r\n\r\n  // build context string\r\n  const ctx = contextPages\r\n    .map(\r\n      (p, i) =>\r\n        `# Source ${i + 1}: ${p.title}\\nURL: ${p.url}\\n${p.content.slice(0, 1200)}`\r\n    )\r\n    .join(\"\\n\\n\");\r\n\r\n  const pageCtx = pageHint?.text\r\n    ? `Current Page: ${pageHint.title || \"\"} (${pageHint.url || \"\"})\\n${pageHint.text.slice(0, 1200)}`\r\n    : \"\";\r\n\r\n  const system = [\r\n    \"You are C2CAI, a helpful website assistant.\",\r\n    \"Use the given sources to answer.\",\r\n    \"If you don't know, say you don't know and suggest where to find it.\",\r\n    \"Detect user's language and respond in that language (Sinhala/English/Tamil).\",\r\n    \"Be concise, friendly, and cite sources by title/URL when helpful.\",\r\n  ].join(\" \");\r\n\r\n  const messages: any[] = [\r\n    { role: \"system\", content: system },\r\n    { role: \"user\", content: `User question:\\n${question}\\n\\nContext:\\n${ctx}\\n\\nPage Context:\\n${pageCtx}` },\r\n  ];\r\n\r\n  const resp = await client.chat.completions.create({\r\n    model,\r\n    messages,\r\n    temperature: 0.3,\r\n  });\r\n\r\n  const answer =\r\n    resp.choices[0]?.message?.content ||\r\n    \"Sorry, I couldn't generate an answer.\";\r\n\r\n  const sources = contextPages\r\n    .slice(0, 3)\r\n    .map((p) => `${p.title} â€” ${p.url}`);\r\n\r\n  return { answer, sources };\r\n}","export function C2CAIWidget(opts: { endpoint: string }) {\r\n  const state = { open: false, sessionId: crypto.randomUUID() };\r\n  const btn = document.createElement(\"button\");\r\n  btn.textContent = \"ðŸ’¬ Chat\";\r\n  Object.assign(btn.style, { position:\"fixed\", bottom:\"20px\", right:\"20px\", zIndex:\"9999\", padding:\"10px 14px\", borderRadius:\"999px\", background:\"#111\", color:\"#fff\" });\r\n  document.body.appendChild(btn);\r\n\r\n  const panel = document.createElement(\"div\");\r\n  panel.innerHTML = `<div style=\"width:320px;height:420px;background:#fff;position:fixed;bottom:70px;right:20px;border:1px solid #ddd;border-radius:12px;display:none;flex-direction:column;overflow:hidden;font-family:system-ui\">\r\n    <div style=\"padding:10px;border-bottom:1px solid #eee;font-weight:600\">C2CAI Assistant</div>\r\n    <div id=\"c2cai-log\" style=\"flex:1;padding:10px;overflow:auto;font-size:14px\"></div>\r\n    <div style=\"display:flex;border-top:1px solid #eee\">\r\n      <input id=\"c2cai-in\" style=\"flex:1;padding:10px;border:0;outline:none\" placeholder=\"Ask me anything...\" />\r\n      <button id=\"c2cai-send\" style=\"padding:10px 12px;border:0;background:#111;color:#fff\">Send</button>\r\n    </div>\r\n  </div>`;\r\n  Object.assign(panel.style, { zIndex: \"9999\" });\r\n  document.body.appendChild(panel);\r\n\r\n  const box = panel.firstElementChild as HTMLDivElement;\r\n  const log = panel.querySelector(\"#c2cai-log\") as HTMLDivElement;\r\n  const input = panel.querySelector(\"#c2cai-in\") as HTMLInputElement;\r\n  const send = panel.querySelector(\"#c2cai-send\") as HTMLButtonElement;\r\n\r\n  function pageContext() {\r\n    const main = document.querySelector(\"main\") || document.body;\r\n    const txt = (main?.textContent || \"\").replace(/\\s+/g, \" \").trim().slice(0, 4000);\r\n    return { url: location.href, title: document.title, text: txt };\r\n    }\r\n\r\n  function add(role:string, text:string) {\r\n    const div = document.createElement(\"div\");\r\n    div.style.margin = \"6px 0\";\r\n    div.innerHTML = `<div style=\"font-weight:600\">${role}</div><div>${text}</div>`;\r\n    log.appendChild(div);\r\n    log.scrollTop = log.scrollHeight;\r\n  }\r\n\r\n  btn.onclick = () => { state.open = !state.open; box!.style.display = state.open ? \"flex\" : \"none\"; };\r\n  send.onclick = async () => {\r\n    const msg = input.value.trim();\r\n    if (!msg) return;\r\n    add(\"You\", msg);\r\n    input.value = \"\";\r\n    const res = await fetch(opts.endpoint + \"/chat\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ message: msg, page: pageContext(), sessionId: state.sessionId })\r\n    }).then(r => r.json());\r\n    add(\"C2CAI\", `${res.answer}\\n\\nSources:\\n${(res.sources||[]).join(\"\\n\")}`);\r\n  };\r\n\r\n  // auto-refresh context on route changes\r\n  [\"popstate\",\"hashchange\"].forEach(ev => window.addEventListener(ev, () => {}));\r\n}"],"mappings":"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","names":["path","fs","Datastore","import_fs","import_path","dotenv","path","fs","OpenAI","express","crypto"]}