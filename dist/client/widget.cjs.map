{"version":3,"sources":["../../src/client/widget.ts"],"sourcesContent":["// src/client/widget.ts (Client-side for embed - Browser compatible)\r\n// Interfaces now from @types/dom-speech-recognition – no inline declarations needed.\r\n\r\nclass VoiceWidget {\r\n  private recognition: SpeechRecognition | null = null;\r\n  private synthesis = window.speechSynthesis;\r\n  private serverUrl = 'http://localhost:3000'; // Customize via opts\r\n\r\n  constructor(private containerId: string = 'c2cai-widget') {\r\n    this.initWidget();\r\n  }\r\n\r\n  private initWidget() {\r\n    const container = document.getElementById(this.containerId);\r\n    if (!container) {\r\n      console.warn(`Container with id \"${this.containerId}\" not found.`);\r\n      return;\r\n    }\r\n\r\n    const startBtn = document.createElement('button');\r\n    startBtn.textContent = 'Start Voice Assistant';\r\n    startBtn.onclick = () => this.startListening();\r\n    container.appendChild(startBtn);\r\n\r\n    // Lang detect (hardcoded defaults for client-side)\r\n    const defaultLang = 'si-LK';\r\n    const userLang = navigator.language || defaultLang;\r\n    this.setupRecognition(userLang);\r\n  }\r\n\r\n  private setupRecognition(lang: string) {\r\n    const SpeechRecognitionConstructor = window.webkitSpeechRecognition || window.SpeechRecognition;\r\n    if (SpeechRecognitionConstructor) {\r\n      this.recognition = new SpeechRecognitionConstructor();\r\n      this.recognition.continuous = true;\r\n      this.recognition.interimResults = false;\r\n      this.recognition.lang = lang;\r\n      this.recognition.onresult = (event: SpeechRecognitionEvent) => {\r\n        // Use last result for continuous mode\r\n        const lastResultIndex = event.results.length - 1;\r\n        const lastResult = event.results[lastResultIndex];\r\n        if (lastResult.isFinal) {\r\n          const query = lastResult[0].transcript;\r\n          this.handleQuery(query);\r\n        }\r\n      };\r\n      this.recognition.onerror = (event: SpeechRecognitionErrorEvent) => {\r\n        console.error('Voice error:', event.error);\r\n      };\r\n    } else {\r\n      console.warn('SpeechRecognition not supported in this browser.');\r\n    }\r\n  }\r\n\r\n  private async handleQuery(query: string) {\r\n    if (!query.trim()) return; // Skip empty queries\r\n    try {\r\n      // Proxy to server\r\n      const res = await fetch(`${this.serverUrl}/chat`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ \r\n          query, \r\n          lang: this.recognition?.lang || 'en-US' \r\n        })\r\n      });\r\n      if (!res.ok) {\r\n        throw new Error(`HTTP error! status: ${res.status}`);\r\n      }\r\n      const data = await res.json();\r\n      const response = data.response || 'No response received.';\r\n      this.speak(response, this.recognition?.lang || 'en-US');\r\n    } catch (e) {\r\n      console.error('Handle query error:', e);\r\n      this.speak('Error occurred. Please try again.');\r\n    }\r\n  }\r\n\r\n  private speak(text: string, lang: string) {\r\n    if (!text) return;\r\n    // Cancel any ongoing speech\r\n    window.speechSynthesis.cancel();\r\n    const utterance = new SpeechSynthesisUtterance(text); // Fixed: Standard constructor (1 arg)\r\n    utterance.lang = lang;\r\n    utterance.volume = 1;\r\n    utterance.rate = 0.9;\r\n    this.synthesis.speak(utterance);\r\n  }\r\n\r\n  startListening() {\r\n    if (this.recognition) {\r\n      const welcomeLang = this.recognition.lang || 'en-US';\r\n      this.speak('ආයුබෝවන්! මට කතා කරන්න.', welcomeLang); // Sinhala welcome\r\n      this.recognition.start();\r\n    } else {\r\n      alert('Voice recognition not supported in this browser. Please use Chrome or Edge.');\r\n    }\r\n  }\r\n\r\n  stopListening() {\r\n    if (this.recognition) {\r\n      this.recognition.stop();\r\n    }\r\n    window.speechSynthesis.cancel();\r\n  }\r\n}\r\n\r\n// Global init function\r\n(window as any).initC2CAI = (opts?: { url?: string; serverUrl?: string; containerId?: string }) => {\r\n  if (opts?.serverUrl) {\r\n    console.warn('serverUrl option logged; implement instance setting if required.');\r\n  }\r\n  new VoiceWidget(opts?.containerId);\r\n};"],"mappings":"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","names":[]}